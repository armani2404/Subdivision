# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SubDiv
                                 A QGIS plugin
 This plugin partitions land parcels to smaller plots.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Caleb Amani
        email                : amanibaraka04@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.utils import iface
from qgis.core import (QgsProject, QgsGeometry, QgsPoint, QgsPointXY, QgsWkbTypes, 
    QgsFeatureRequest, QgsVectorLayer, QgsDistanceArea, QgsUnitTypes, 
    QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsFeature, QgsField, QgsExpression,
    QgsExpressionContext, QgsExpressionContextUtils, edit, QgsVectorDataProvider)
from qgis.core import *
from qgis.gui import *
import processing
import math


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .subdivision_dialog import SubDivDialog
import os.path


class SubDiv:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SubDiv_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Subdivision')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #Initializing the subdivision parameters
        #self.lot_width = lot_width
        #self.dsb_width = QDoubleSpinBox(self)
        #self.dsb_width.setMinimum(15)
        self.memory_sides = None
        self.memory_adjacents = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SubDiv', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/subdivision/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Subdivide land parcels'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Subdivision'),
                action)
            self.iface.removeToolBarIcon(action)  
  
    def explode_lines(self):
        layer = self.dlg.cbParcel.currentLayer()
        bounds = processing.run("native:orientedminimumboundingbox", {"INPUT":layer, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        parcel_vertices = processing.run("native:extractvertices", {"INPUT":bounds, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        #QgsProject.instance().addMapLayer(parcel_vertices)
        lines = processing.run("native:polygonstolines", {"INPUT":bounds, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        #QgsProject.instance().addMapLayer(lines)
        explode = processing.run("native:explodelines", {"INPUT":lines, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]

        pv = explode.dataProvider()
        pv.addAttributes([QgsField("ID", QVariant.Int)])
        explode.updateFields()

        expression = QgsExpression("$id")
        context = QgsExpressionContext()
        context.appendScopes(\
        QgsExpressionContextUtils.globalProjectLayerScopes(explode))

        with edit(explode):
            for f in explode.getFeatures():
                context.setFeature(f)
                f["ID"] = expression.evaluate(context)
                explode.updateFeature(f)

        explode.setLabelsEnabled(True)
        text_format = QgsTextFormat()
        label = QgsPalLayerSettings()
        label.fieldName = 'ID' 
        label.enabled = True
        label.setFormat(text_format)
        label.placement = QgsPalLayerSettings.Line
        labeler = QgsVectorLayerSimpleLabeling(label)
        explode.setLabeling(labeler)
        explode.triggerRepaint()
        #QgsProject.instance().addMapLayer(explode)
        return explode
        
    def vertices(self):
        layer = self.dlg.cbParcel.currentLayer()
        bounds_result = processing.run("native:orientedminimumboundingbox", {"INPUT":layer, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        vertices_result = processing.run("native:extractvertices", {"INPUT":bounds_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        return (vertices_result)
     
    def vertex_coordinates(self):
        coords = [] 
        features = self.vertices().getFeatures()
        for feature in features:
            geom = feature.geometry()
            x = geom.asPoint()
            coords.append(x)
        return coords
            
    def long_short_axis(self):
        coords = self.vertex_coordinates()
        self.pt1 = coords[0]
        self.pt1_x = coords[0].x()
        self.pt1_y = coords[0].y()
        self.pt2 = coords[1]
        self.pt2_x = coords[1].x()
        self.pt2_y = coords[1].y()
        self.pt3 = coords[2]
        self.pt3_x = coords[2].x()
        self.pt3_y = coords[2].y()
        self.pt4 = coords[3]
        self.pt4_x = coords[3].x()
        self.pt4_y = coords[3].y()
        d = QgsDistanceArea()
        self.length_1 = d.measureLine(self.pt1, self.pt2)
        self.length_2 = d.measureLine(self.pt2, self.pt3)
        self.length_3 = d.measureLine(self.pt3, self.pt4)
        self.length_4 = d.measureLine(self.pt4, self.pt1)
        
        self.lot_width = self.dlg.dsbLot_Width.value()
        if self.length_1 > self.length_2:
            if self.length_1 >= self.length_3:
                self.long_axis = self.length_1
            else:
                self.long_axis = self.length_3
            if self.length_2 >= self.length_4:
                self.short_axis = self.length_2
            else:
                self.short_axis = self.length_4
            self.n = int((self.long_axis/self.lot_width)-2)
        else: 
            if self.length_2 >= self.length_4:
                self.long_axis = self.length_2
            else:
                self.long_axis = self.length_4
            if self.length_1 >= self.length_3:
                self.short_axis = self.length_1
            else:
                self.short_axis = self.length_3
            self.n = int((self.long_axis/self.lot_width)-2)
            
    def dialog(self, value):
        layer = self.dlg.cbParcel.currentLayer()
        explode = self.explode_lines()
        if value == 1:
            adj_value1, adj_value2 = 2,4
            opp_value = 3
        elif value == 2:
            adj_value1, adj_value2 = 3,1
            opp_value = 4
        elif value == 3:
            adj_value1, adj_value2 = 4,2
            opp_value = 1
        elif value == 4:
            adj_value1, adj_value2 = 1,3
            opp_value = 2
        else:
            opp_value = "Invalid input"
            adj_value1 = "Invalid input"
            adj_value2 = "Invalid input"
        print("Value: ", value)
        print("Opposite value", opp_value)
        print("Adjacent value1: ", adj_value1)
        print("Adjacent value2: ", adj_value2)
        
        #Create memory layer for side adjacent to the road
        feature1 = explode.getFeature(value)
        feature2 = explode.getFeature(opp_value)
        layer_crs = layer.crs().authid()
        crs = QgsCoordinateReferenceSystem(layer_crs)
        memory_layer1 = QgsVectorLayer("LineString", "Parcel Side", "memory", crs = crs)
        # Add fields from the original layer to the memory layer
        memory_layer1.dataProvider().addAttributes(explode.fields())
        # Add the selected feature to the memory layer
        memory_layer1.startEditing()
        memory_layer1.addFeature(feature1)
        memory_layer1.addFeature(feature2)
        memory_layer1.commitChanges()
        
        #Create memory layer for the side not adjacent to the road
        feature3 = explode.getFeature(adj_value1)
        feature4 = explode.getFeature(adj_value2)
        memory_layer2 = QgsVectorLayer("LineString", "Adjacent side", "memory", crs = crs)
        memory_layer2.dataProvider().addAttributes(explode.fields())
        memory_layer2.startEditing()
        memory_layer2.addFeature(feature3)
        memory_layer2.addFeature(feature4)
        memory_layer2.commitChanges()
        return memory_layer1, memory_layer2
    
    def roads(self, centreline):
        layer = self.dlg.cbParcel.currentLayer()
        road_width = self.dlg.dsbRoad_Width.value()
        road_boundary = []
        boundary1 = processing.run("native:offsetline", {"INPUT":centreline, "DISTANCE":road_width/2, "SEGMENTS":8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        boundary2 = processing.run("native:offsetline", {"INPUT":centreline, "DISTANCE":-(road_width/2), "SEGMENTS":8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        road_boundary.append(boundary1)
        road_boundary.append(boundary2)

        merged = processing.run("native:mergevectorlayers", {"LAYERS":road_boundary, "CRS":"","OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        partition_result = processing.run("native:splitwithlines", {"INPUT":layer, "LINES":merged, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]

        #Deleting all unnecessary features from partition_result
        features = partition_result.getFeatures()
        for f in features:
            geom = f.geometry()
            d = QgsDistanceArea()
            area = d.measureArea(geom)
            
        pv = partition_result.dataProvider()
        pv.addAttributes([QgsField("SUBDIV_SIZE", QVariant.Double), QgsField("SUBDIV_ID", QVariant.Int)])
        partition_result.updateFields()

        expression1 = QgsExpression("$area")
        expression2 = QgsExpression("$id")
        context = QgsExpressionContext()
        context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(partition_result))

        with edit(partition_result):
            for f in partition_result.getFeatures():
                context.setFeature(f)
                f["SUBDIV_SIZE"] = expression1.evaluate(context)
                f["SUBDIV_ID"] = expression2.evaluate(context)
                partition_result.updateFeature(f)

        caps = partition_result.dataProvider().capabilities()
        dfeats = []
        if caps & QgsVectorDataProvider.DeleteFeatures:
            for feat in partition_result.getFeatures():
                if feat["SUBDIV_SIZE"] <= 50:
                    dfeats.append(feat.id())
                    
            deleted = partition_result.dataProvider().deleteFeatures(dfeats)
            #the features displayed on the map canvas are redrawn i.e., deleted features disappear
            partition_result.triggerRepaint()
        
        #Getting the road layer from partition_result
        field = partition_result.fields()
        index = field.lookupField("SUBDIV_SIZE")
        min_value = partition_result.minimumValue(index)

        request = QgsFeatureRequest().setFilterExpression(f'"SUBDIV_SIZE" = {min_value}')
        road_feature = partition_result.getFeatures(request)
        for feat in road_feature:
            feature = feat

        layer_crs = layer.crs().authid()
        crs = QgsCoordinateReferenceSystem(layer_crs)
        mem_layer = QgsVectorLayer("Polygon", "Road", "memory", crs = crs)
        mem_layer.dataProvider().addAttributes(partition_result.fields())
        mem_layer.startEditing()
        mem_layer.addFeature(feature)
        mem_layer.commitChanges()
        #QgsProject.instance().addMapLayer(mem_layer)
        lines = processing.run("native:polygonstolines", {"INPUT":mem_layer, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        road = processing.run("native:explodelines", {"INPUT":lines, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
        #QgsProject.instance().addMapLayer(road)

        caps = partition_result.dataProvider().capabilities()
        dfeats = []
        if caps & QgsVectorDataProvider.DeleteFeatures:
            for feat in partition_result.getFeatures():
                if feat["SUBDIV_SIZE"] <= min_value:
                    dfeats.append(feat.id())
                    
            deleted = partition_result.dataProvider().deleteFeatures(dfeats)
            #the features displayed on the map canvas are redrawn i.e., deleted features disappear
            partition_result.triggerRepaint()
        return partition_result
        
    def partition(self):
        self.lot_length = self.dlg.dsbLot_Length.value()
        layer = self.dlg.cbParcel.currentLayer()
        self.long_short_axis()
        if self.short_axis <= self.lot_length + self.lot_length/2:
            if self.length_1 > self.length_2:
                X1 = self.pt1_x-((self.lot_width*(self.pt1_x-self.pt2_x))/self.length_1)
                Y1 = self.pt1_y-((self.lot_width*(self.pt1_y-self.pt2_y))/self.length_1)

                X2 = self.pt4_x-((self.lot_width*(self.pt4_x-self.pt3_x))/self.length_3)
                Y2 = self.pt4_y-((self.lot_width*(self.pt4_y-self.pt3_y))/self.length_3)
            else: 
                X1 = self.pt2_x-((self.lot_width*(self.pt2_x-self.pt3_x))/self.length_2)
                Y1 = self.pt2_y-((self.lot_width*(self.pt2_y-self.pt3_y))/self.length_2)

                X2 = self.pt1_x-((self.lot_width*(self.pt1_x-self.pt4_x))/self.length_4)
                Y2 = self.pt1_y-((self.lot_width*(self.pt1_y-self.pt4_y))/self.length_4)
            line_start = QgsPoint(X1, Y1)
            line_end = QgsPoint(X2, Y2)
            line = QgsGeometry.fromPolyline([line_start, line_end])
            #Creating a new memory layer
            v_layer = QgsVectorLayer("Linestring?crs=epsg:32737", "line", "memory")
            pr = v_layer.dataProvider()
            #Create a new feature
            seg = QgsFeature()
            #add the geometry to the feature
            seg.setGeometry(line)
            #add the geometry to the layer
            pr.addFeatures([seg])
            div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
               
            offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":self.n, "OFFSET":-self.lot_width, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]    
            partition_result = processing.run("native:splitwithlines", {"INPUT":layer, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
            QgsProject.instance().addMapLayer(partition_result)
        else:
            if self.length_1 > self.length_2:
                X1 = self.pt2_x-(((self.length_2/2)*(self.pt2_x-self.pt3_x))/self.length_2)
                Y1 = self.pt2_y-(((self.length_2/2)*(self.pt2_y-self.pt3_y))/self.length_2)

                X2 = self.pt1_x-(((self.length_4/2)*(self.pt1_x-self.pt4_x))/self.length_4)
                Y2 = self.pt1_y-(((self.length_4/2)*(self.pt1_y-self.pt4_y))/self.length_4)
            else: 
                X1 = self.pt1_x-(((self.length_1/2)*(self.pt1_x-self.pt2_x))/self.length_1)
                Y1 = self.pt1_y-(((self.length_1/2)*(self.pt1_y-self.pt2_y))/self.length_1)

                X2 = self.pt4_x-(((self.length_3/2)*(self.pt4_x-self.pt3_x))/self.length_3)
                Y2 = self.pt4_y-(((self.length_3/2)*(self.pt4_y-self.pt3_y))/self.length_3)
                    
            line_start = QgsPoint(X1, Y1)
            line_end = QgsPoint(X2, Y2)
            line = QgsGeometry.fromPolyline([line_start, line_end])
            #Creating a new memory layer
            v_layer = QgsVectorLayer("Linestring?crs=epsg:32737", "line", "memory")
            pr = v_layer.dataProvider()
            #Create a new feature
            seg = QgsFeature()
            #add the geometry to the feature
            seg.setGeometry(line)
            #add the geometry to the layer
            pr.addFeatures([seg])
            centreline = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
            #QgsProject.instance().addMapLayer(centreline)

            partition_result = self.roads(centreline)

            field = partition_result.fields().names()
            split_result = processing.run("native:splitvectorlayer", {"INPUT":partition_result, "FIELD":field[-1], "FILE_TYPE":1, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT_LAYERS"]
            splitted_layers = []
            for i in split_result:
                split_layer = QgsVectorLayer(i,"Splitted","ogr")
                splitted_layers.append(split_layer)
            print (splitted_layers)

            #for z in splitted_layers:
                #QgsProject.instance().addMapLayer(z)  
                
            merged = []
            for x in splitted_layers:
                bounds_result = processing.run("native:orientedminimumboundingbox", {"INPUT":x, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                #QgsProject.instance().addMapLayer(bounds_result)
                vertices_result = processing.run("native:extractvertices", {"INPUT":bounds_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                #QgsProject.instance().addMapLayer(vertices_result)

                coords = [] 
                features = vertices_result.getFeatures()
                for feature in features:
                    geom = feature.geometry()
                    a = geom.asPoint()
                    coords.append(a)
                        
                pt1 = coords[0]
                pt1_x = coords[0].x()
                pt1_y = coords[0].y()
                pt2 = coords[1]
                pt2_x = coords[1].x()
                pt2_y = coords[1].y()
                pt3 = coords[2]
                pt3_x = coords[2].x()
                pt3_y = coords[2].y()
                pt4 = coords[3]
                pt4_x = coords[3].x()
                pt4_y = coords[3].y()
                d = QgsDistanceArea()
                length_1 = d.measureLine(pt1, pt2)
                length_2 = d.measureLine(pt2, pt3)
                length_3 = d.measureLine(pt3, pt4)
                length_4 = d.measureLine(pt4, pt1)

                if length_1 > length_2:
                    if length_1 >= length_3:
                        long_axis = length_1
                    else:
                        long_axis = length_3
                    if length_2 >= length_4:
                        short_axis = length_2
                    else:
                        short_axis = length_4
                    n = int((long_axis/self.lot_width)-2)   
                else: 
                    if length_2 >= length_4:
                        long_axis = length_2
                    else:
                        long_axis = length_4
                    if length_1 >= length_3:
                        short_axis = length_1
                    else:
                        short_axis = length_3
                    n = int((long_axis/self.lot_width)-2)
                        
                if length_1 > length_2:
                    X1 = pt1_x-((self.lot_width*(pt1_x-pt2_x))/length_1)
                    Y1 = pt1_y-((self.lot_width*(pt1_y-pt2_y))/length_1)

                    X2 = pt4_x-((self.lot_width*(pt4_x-pt3_x))/length_3)
                    Y2 = pt4_y-((self.lot_width*(pt4_y-pt3_y))/length_3)
                else: 
                    X1 = pt2_x-((self.lot_width*(pt2_x-pt3_x))/length_2)
                    Y1 = pt2_y-((self.lot_width*(pt2_y-pt3_y))/length_2)

                    X2 = pt1_x-((self.lot_width*(pt1_x-pt4_x))/length_4)
                    Y2 = pt1_y-((self.lot_width*(pt1_y-pt4_y))/length_4)

                line_start = QgsPoint(X1, Y1)
                line_end = QgsPoint(X2, Y2)
                line = QgsGeometry.fromPolyline([line_start, line_end])
                #Creating a new memory layer
                v_layer = QgsVectorLayer("Linestring?crs=epsg:32737", "line", "memory")
                pr = v_layer.dataProvider()
                #Create a new feature
                seg = QgsFeature()
                #add the geometry to the feature
                seg.setGeometry(line)
                #add the geometry to the layer
                pr.addFeatures([seg])
                div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":n, "OFFSET":-self.lot_width, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]   
                partition_result = processing.run("native:splitwithlines", {"INPUT":x, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                merged.append(partition_result)
            self.merged_result = processing.run("native:mergevectorlayers", {"LAYERS":merged, "CRS":"","OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
            QgsProject.instance().addMapLayer(self.merged_result)
            
    def input_dialog(self):
        explode = self.explode_lines()
        QgsProject.instance().addMapLayer(explode)
        input_dialog = QInputDialog(iface.mainWindow())
        input_dialog.setModal(False)  # Set the input dialog to be modeless
        input_dialog.setWindowTitle("Road adjacent side")
        input_dialog.setLabelText("Select parcel side adjacent to a road:")
        input_dialog.setIntRange(1, 4)
        input_dialog.setIntValue(1)
        input_dialog.show()

        if input_dialog.exec_() == QDialog.Accepted:
            # The user clicked the "OK" button and entered a value
            value = input_dialog.intValue()
            self.memory_sides, self.memory_adjacents = self.dialog(value)
            #QgsProject.instance().addMapLayer(self.memory_sides)
            #QgsProject.instance().addMapLayer(self.memory_adjacents)
        else:
            # The user clicked the "Cancel" button
            self.partition()
            #The user cancelled the input dialog
        QgsProject.instance().removeMapLayer(explode)
        
            
    def roadside_partition(self):
        if self.memory_sides is not None and self.memory_adjacents is not None:
            self.lot_length = self.dlg.dsbLot_Length.value()
            self.lot_width = self.dlg.dsbLot_Width.value()
            layer = self.dlg.cbParcel.currentLayer()
            side_vertices = processing.run("native:extractvertices", {"INPUT":self.memory_sides, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
            #QgsProject.instance().addMapLayer(side_vertices)
            adjacent_vertices = processing.run("native:extractvertices", {"INPUT":self.memory_adjacents, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
            #QgsProject.instance().addMapLayer(adjacent_vertices)
            #Length of parcel side adjacent to the road
            side_coords= []
            feat = side_vertices.getFeatures()
            for f in feat:
                geom = f.geometry()
                x = geom.asPoint()
                side_coords.append(x)
            side_pt1 = side_coords[0]
            side_pt1x = side_coords[0].x()
            side_pt1y = side_coords[0].y()
            side_pt2 = side_coords[1]
            side_pt2x = side_coords[1].x()
            side_pt2y = side_coords[1].y()
            side_pt3 = side_coords[2]
            side_pt3x = side_coords[2].x()
            side_pt3y = side_coords[2].y()
            side_pt4 = side_coords[3]
            side_pt4x = side_coords[3].x()
            side_pt4y = side_coords[3].y()
            d = QgsDistanceArea()
            side_length = d.measureLine(side_pt1, side_pt2)
            opp_side_length = d.measureLine(side_pt3, side_pt4)

            #Length of parcel sides not adjacent to the road
            adj_coords= []
            feat = adjacent_vertices.getFeatures()
            for f in feat:
                geom = f.geometry()
                x = geom.asPoint()
                adj_coords.append(x)
            #print ("line_coords: ", line_coords) 
            adj_pt1 = adj_coords[0]
            adj_pt1x = adj_coords[0].x()
            adj_pt1y = adj_coords[0].y()
            adj_pt2 = adj_coords[1]
            adj_pt2x = adj_coords[1].x()
            adj_pt2y = adj_coords[1].y()
            adj_pt3 = adj_coords[2]
            adj_pt3x = adj_coords[2].x()
            adj_pt3y = adj_coords[2].y()
            adj_pt4 = adj_coords[3]
            adj_pt4x = adj_coords[3].x()
            adj_pt4y = adj_coords[3].y()
            d = QgsDistanceArea()
            adj_length = d.measureLine(adj_pt1, adj_pt2)
            opp_adj_length = d.measureLine(adj_pt3, adj_pt4)
            
            
            if side_length >= adj_length:
                if adj_length <= self.lot_length:
                    #METHOD 1
                    X1 = side_pt1x-(((self.lot_width)*(side_pt1x-side_pt2x))/side_length)
                    Y1 = side_pt1y-(((self.lot_width)*(side_pt1y-side_pt2y))/side_length)
                    X2 = side_pt4x-(((self.lot_width)*(side_pt4x-side_pt3x))/opp_side_length)
                    Y2 = side_pt4y-(((self.lot_width)*(side_pt4y-side_pt3y))/opp_side_length)
                    n = int((side_length/self.lot_width) - 2)
                    if n < 1:
                        n = 1
                    line_start = QgsPoint(X1, Y1)
                    line_end = QgsPoint(X2, Y2)
                    line = QgsGeometry.fromPolyline([line_start, line_end])
                    layer_crs = layer.crs().authid()
                    crs = QgsCoordinateReferenceSystem(layer_crs)
                    v_layer = QgsVectorLayer("Linestring", "Div Line", "memory", crs = crs)
                    pr = v_layer.dataProvider()
                    seg = QgsFeature()
                    seg.setGeometry(line)
                    pr.addFeatures([seg])
                    div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    #QgsProject.instance().addMapLayer(div_line)
                    
                    offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":n, "OFFSET":-self.lot_width, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    partition_result = processing.run("native:splitwithlines", {"INPUT":layer, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    QgsProject.instance().addMapLayer(partition_result)
                else:
                    #"METHOD 2"
                    X1 = side_pt1x-(((side_length/2)*(side_pt1x-side_pt2x))/side_length)
                    Y1 = side_pt1y-(((side_length/2)*(side_pt1y-side_pt2y))/side_length)
                    X2 = side_pt4x-(((opp_side_length/2)*(side_pt4x-side_pt3x))/opp_side_length)
                    Y2 = side_pt4y-(((opp_side_length/2)*(side_pt4y-side_pt3y))/opp_side_length)
                    
                    line_start = QgsPoint(X1, Y1)
                    line_end = QgsPoint(X2, Y2)
                    line = QgsGeometry.fromPolyline([line_start, line_end])
                    layer_crs = layer.crs().authid()
                    crs = QgsCoordinateReferenceSystem(layer_crs)
                    v_layer = QgsVectorLayer("Linestring", "Div Line", "memory", crs = crs)
                    pr = v_layer.dataProvider()
                    seg = QgsFeature()
                    seg.setGeometry(line)
                    pr.addFeatures([seg])
                    centreline = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    #QgsProject.instance().addMapLayer(centreline)
                    
                    partition_result = self.roads(centreline)
                    
                    field = partition_result.fields().names()
                    split_result = processing.run("native:splitvectorlayer", {"INPUT":partition_result, "FIELD":field[-1], "FILE_TYPE":1, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT_LAYERS"]
                    splitted_layers = []
                    for i in split_result:
                        split_layer = QgsVectorLayer(i,"Splitted","ogr")
                        splitted_layers.append(split_layer)
                    

                    #for z in splitted_layers:
                        #QgsProject.instance().addMapLayer(z)
                        
                    merged = []
                    for x in splitted_layers:
                        bounds_result = processing.run("native:orientedminimumboundingbox", {"INPUT":x, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(bounds_result)
                        vertices_result = processing.run("native:extractvertices", {"INPUT":bounds_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(vertices_result)
                        coords = [] 
                        features = vertices_result.getFeatures()
                        for feature in features:
                            geom = feature.geometry()
                            a = geom.asPoint()
                            coords.append(a)
                        pt1 = coords[0]
                        pt1_x = coords[0].x()
                        pt1_y = coords[0].y()
                        pt2 = coords[1]
                        pt2_x = coords[1].x()
                        pt2_y = coords[1].y()
                        pt3 = coords[2]
                        pt3_x = coords[2].x()
                        pt3_y = coords[2].y()
                        pt4 = coords[3]
                        pt4_x = coords[3].x()
                        pt4_y = coords[3].y()
                        d = QgsDistanceArea()
                        length_1 = d.measureLine(pt1, pt2)
                        length_2 = d.measureLine(pt2, pt3)
                        length_3 = d.measureLine(pt3, pt4)
                        length_4 = d.measureLine(pt4, pt1)
                    
                        if length_1 > length_2:
                            if length_1 >= length_3:
                                long_axis = length_1
                            else:
                                long_axis = length_3
                            if length_2 >= length_4:
                                short_axis = length_2
                            else:
                                short_axis = length_4
                            n = round((long_axis/self.lot_width)-2)   
                        else: 
                            if length_2 >= length_4:
                                long_axis = length_2
                            else:
                                long_axis = length_4
                            if length_1 >= length_3:
                                short_axis = length_1
                            else:
                                short_axis = length_3
                            n = int((long_axis/self.lot_width)-2)  
                        if n < 1:
                            n = 1
                        
                        if length_1 > length_2:
                            X1 = pt2_x-((self.lot_width*(pt2_x-pt3_x))/length_2)
                            Y1 = pt2_y-((self.lot_width*(pt2_y-pt3_y))/length_2)

                            X2 = pt1_x-((self.lot_width*(pt1_x-pt4_x))/length_4)
                            Y2 = pt1_y-((self.lot_width*(pt1_y-pt4_y))/length_4)
                            
                        else: 
                            X1 = pt1_x-((self.lot_width*(pt1_x-pt2_x))/length_1)
                            Y1 = pt1_y-((self.lot_width*(pt1_y-pt2_y))/length_1)

                            X2 = pt4_x-((self.lot_width*(pt4_x-pt3_x))/length_3)
                            Y2 = pt4_y-((self.lot_width*(pt4_y-pt3_y))/length_3)
                            
                        line_start = QgsPoint(X1, Y1)
                        line_end = QgsPoint(X2, Y2)
                        line = QgsGeometry.fromPolyline([line_start, line_end])
                        layer_crs = layer.crs().authid()
                        crs = QgsCoordinateReferenceSystem(layer_crs)
                        v_layer = QgsVectorLayer("Linestring", "Div Lines", "memory", crs = crs)
                        pr = v_layer.dataProvider()
                        #Create a new feature
                        seg = QgsFeature()
                        #add the geometry to the feature
                        seg.setGeometry(line)
                        #add the geometry to the layer
                        pr.addFeatures([seg])
                        div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(div_line)
                        offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":n, "OFFSET":-self.lot_width, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(offset_result)    
                        partition_result = processing.run("native:splitwithlines", {"INPUT":x, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(partition_result)
                        merged.append(partition_result)
                    #print(merged)
                    merged_result = processing.run("native:mergevectorlayers", {"LAYERS":merged, "CRS":"","OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    QgsProject.instance().addMapLayer(merged_result)
            else:
                if side_length <= self.lot_length:
                    X1 = side_pt1x-(((side_length/2)*(side_pt1x-side_pt2x))/side_length)
                    Y1 = side_pt1y-(((side_length/2)*(side_pt1y-side_pt2y))/side_length)
                    X2 = side_pt4x-(((opp_side_length/2)*(side_pt4x-side_pt3x))/opp_side_length)
                    Y2 = side_pt4y-(((opp_side_length/2)*(side_pt4y-side_pt3y))/opp_side_length)

                    line_start = QgsPoint(X1, Y1)
                    line_end = QgsPoint(X2, Y2)
                    line = QgsGeometry.fromPolyline([line_start, line_end])
                    layer_crs = layer.crs().authid()
                    crs = QgsCoordinateReferenceSystem(layer_crs)
                    v_layer = QgsVectorLayer("Linestring", "Div Line", "memory", crs = crs)
                    pr = v_layer.dataProvider()
                    seg = QgsFeature()
                    seg.setGeometry(line)
                    pr.addFeatures([seg])
                    centreline = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    #QgsProject.instance().addMapLayer(centreline)
                    
                    partition_result = self.roads(centreline)
                    
                    field = partition_result.fields().names()
                    split_result = processing.run("native:splitvectorlayer", {"INPUT":partition_result, "FIELD":field[-1], "FILE_TYPE":1, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT_LAYERS"]
                    splitted_layers = []
                    for i in split_result:
                        split_layer = QgsVectorLayer(i,"Splitted","ogr")
                        splitted_layers.append(split_layer)

                    #for z in splitted_layers:
                        #QgsProject.instance().addMapLayer(z)
                    
                    merged = []
                    for x in splitted_layers:
                        bounds_result = processing.run("native:orientedminimumboundingbox", {"INPUT":x, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(bounds_result)
                        vertices_result = processing.run("native:extractvertices", {"INPUT":bounds_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(vertices_result)
                        coords = [] 
                        features = vertices_result.getFeatures()
                        for feature in features:
                            geom = feature.geometry()
                            a = geom.asPoint()
                            coords.append(a)
                        pt1 = coords[0]
                        pt1_x = coords[0].x()
                        pt1_y = coords[0].y()
                        pt2 = coords[1]
                        pt2_x = coords[1].x()
                        pt2_y = coords[1].y()
                        pt3 = coords[2]
                        pt3_x = coords[2].x()
                        pt3_y = coords[2].y()
                        pt4 = coords[3]
                        pt4_x = coords[3].x()
                        pt4_y = coords[3].y()
                        d = QgsDistanceArea()
                        length_1 = d.measureLine(pt1, pt2)
                        length_2 = d.measureLine(pt2, pt3)
                        length_3 = d.measureLine(pt3, pt4)
                        length_4 = d.measureLine(pt4, pt1)
                        
                        if length_1 > length_2:
                            if length_1 >= length_3:
                                long_axis = length_1
                            else:
                                long_axis = length_3
                            if length_2 >= length_4:
                                short_axis = length_2
                            else:
                                short_axis = length_4
                            n = round((long_axis/self.lot_length)-2)   
                        else: 
                            if length_2 >= length_4:
                                long_axis = length_2
                            else:
                                long_axis = length_4
                            if length_1 >= length_3:
                                short_axis = length_1
                            else:
                                short_axis = length_3
                            n = round((long_axis/self.lot_length)-2)   
                        if n < 1:
                            n = 1
                        
                        if length_1 > length_2:
                            X1 = pt1_x-((self.lot_width*(pt1_x-pt2_x))/length_1)
                            Y1 = pt1_y-((self.lot_width*(pt1_y-pt2_y))/length_1)

                            X2 = pt4_x-((self.lot_width*(pt4_x-pt3_x))/length_3)
                            Y2 = pt4_y-((self.lot_width*(pt4_y-pt3_y))/length_3)
                        else: 
                            X1 = pt2_x-((self.lot_width*(pt2_x-pt3_x))/length_2)
                            Y1 = pt2_y-((self.lot_width*(pt2_y-pt3_y))/length_2)

                            X2 = pt1_x-((self.lot_width*(pt1_x-pt4_x))/length_4)
                            Y2 = pt1_y-((self.lot_width*(pt1_y-pt4_y))/length_4)

                        line_start = QgsPoint(X1, Y1)
                        line_end = QgsPoint(X2, Y2)
                        line = QgsGeometry.fromPolyline([line_start, line_end])
                        layer_crs = layer.crs().authid()
                        crs = QgsCoordinateReferenceSystem(layer_crs)
                        v_layer = QgsVectorLayer("Linestring", "Div Lines", "memory", crs = crs)
                        pr = v_layer.dataProvider()
                        #Create a new feature
                        seg = QgsFeature()
                        #add the geometry to the feature
                        seg.setGeometry(line)
                        #add the geometry to the layer
                        pr.addFeatures([seg])
                        div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(div_line)
                        
                        offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":n, "OFFSET":self.lot_length, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(offset_result)    
                        
                        partition_result = processing.run("native:splitwithlines", {"INPUT":x, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(partition_result)
                        merged.append(partition_result)
                    merged_result = processing.run("native:mergevectorlayers", {"LAYERS":merged, "CRS":"","OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    QgsProject.instance().addMapLayer(merged_result)
                else:
                    X1 = side_pt1x-(((side_length/2)*(side_pt1x-side_pt2x))/side_length)
                    Y1 = side_pt1y-(((side_length/2)*(side_pt1y-side_pt2y))/side_length)
                    X2 = side_pt4x-(((opp_side_length/2)*(side_pt4x-side_pt3x))/opp_side_length)
                    Y2 = side_pt4y-(((opp_side_length/2)*(side_pt4y-side_pt3y))/opp_side_length)
                    
                    line_start = QgsPoint(X1, Y1)
                    line_end = QgsPoint(X2, Y2)
                    line = QgsGeometry.fromPolyline([line_start, line_end])
                    layer_crs = layer.crs().authid()
                    crs = QgsCoordinateReferenceSystem(layer_crs)
                    v_layer = QgsVectorLayer("Linestring", "Div Line", "memory", crs = crs)
                    pr = v_layer.dataProvider()
                    seg = QgsFeature()
                    seg.setGeometry(line)
                    pr.addFeatures([seg])
                    centreline = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    #QgsProject.instance().addMapLayer(centreline)
                    
                    partition_result = self.roads(centreline)
                    
                    field = partition_result.fields().names()
                    split_result = processing.run("native:splitvectorlayer", {"INPUT":partition_result, "FIELD":field[-1], "FILE_TYPE":1, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT_LAYERS"]
                    splitted_layers = []
                    for i in split_result:
                        split_layer = QgsVectorLayer(i,"Splitted","ogr")
                        splitted_layers.append(split_layer)
                    
                    #for z in splitted_layers:
                        #QgsProject.instance().addMapLayer(z)
                    
                    merged = []
                    for x in splitted_layers:
                        bounds_result = processing.run("native:orientedminimumboundingbox", {"INPUT":x, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(bounds_result)
                        vertices_result = processing.run("native:extractvertices", {"INPUT":bounds_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(vertices_result)
                        coords = [] 
                        features = vertices_result.getFeatures()
                        for feature in features:
                            geom = feature.geometry()
                            a = geom.asPoint()
                            coords.append(a)
                        pt1 = coords[0]
                        pt1_x = coords[0].x()
                        pt1_y = coords[0].y()
                        pt2 = coords[1]
                        pt2_x = coords[1].x()
                        pt2_y = coords[1].y()
                        pt3 = coords[2]
                        pt3_x = coords[2].x()
                        pt3_y = coords[2].y()
                        pt4 = coords[3]
                        pt4_x = coords[3].x()
                        pt4_y = coords[3].y()
                        d = QgsDistanceArea()
                        length_1 = d.measureLine(pt1, pt2)
                        length_2 = d.measureLine(pt2, pt3)
                        length_3 = d.measureLine(pt3, pt4)
                        length_4 = d.measureLine(pt4, pt1)
                        
                        if length_1 > length_2:
                            if length_1 >= length_3:
                                long_axis = length_1
                            else:
                                long_axis = length_3
                            if length_2 >= length_4:
                                short_axis = length_2
                            else:
                                short_axis = length_4
                            n = int((long_axis/self.lot_width)-2)   
                        else: 
                            if length_2 >= length_4:
                                long_axis = length_2
                            else:
                                long_axis = length_4
                            if length_1 >= length_3:
                                short_axis = length_1
                            else:
                                short_axis = length_3
                            n = int((long_axis/self.lot_width)-2) 
                        if n < 1:
                            n = 1                       
                        
                        if length_1 > length_2:
                            X1 = pt1_x-((self.lot_width*(pt1_x-pt2_x))/length_1)
                            Y1 = pt1_y-((self.lot_width*(pt1_y-pt2_y))/length_1)

                            X2 = pt4_x-((self.lot_width*(pt4_x-pt3_x))/length_3)
                            Y2 = pt4_y-((self.lot_width*(pt4_y-pt3_y))/length_3)
                        else: 
                            X1 = pt2_x-((self.lot_width*(pt2_x-pt3_x))/length_2)
                            Y1 = pt2_y-((self.lot_width*(pt2_y-pt3_y))/length_2)

                            X2 = pt1_x-((self.lot_width*(pt1_x-pt4_x))/length_4)
                            Y2 = pt1_y-((self.lot_width*(pt1_y-pt4_y))/length_4)

                        line_start = QgsPoint(X1, Y1)
                        line_end = QgsPoint(X2, Y2)
                        line = QgsGeometry.fromPolyline([line_start, line_end])
                        layer_crs = layer.crs().authid()
                        crs = QgsCoordinateReferenceSystem(layer_crs)
                        v_layer = QgsVectorLayer("Linestring", "Div Lines", "memory", crs = crs)
                        pr = v_layer.dataProvider()
                        #Create a new feature
                        seg = QgsFeature()
                        #add the geometry to the feature
                        seg.setGeometry(line)
                        #add the geometry to the layer
                        pr.addFeatures([seg])
                        div_line = processing.run("native:extendlines",{"INPUT": v_layer, "START_DISTANCE":5, "END_DISTANCE":5, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(div_line)
                        offset_result = processing.run("native:arrayoffsetlines", {"INPUT":div_line, "COUNT":n, "OFFSET":-self.lot_width, "SEGMENT": 8, "JOIN_STYLE":0, "MITER_LIMIT":2, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(offset_result)    
                        partition_result = processing.run("native:splitwithlines", {"INPUT":x, "LINES":offset_result, "OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                        #QgsProject.instance().addMapLayer(partition_result)
                        merged.append(partition_result)
                    merged_result = processing.run("native:mergevectorlayers", {"LAYERS":merged, "CRS":"","OUTPUT":"TEMPORARY_OUTPUT"})["OUTPUT"]
                    QgsProject.instance().addMapLayer(merged_result)
        else:
            return

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SubDivDialog()
            
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.input_dialog()
            self.roadside_partition()
            
            